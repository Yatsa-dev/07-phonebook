{"version":3,"sources":["components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","components/Container/Container.module.css","components/Filter/Filter.module.css","components/Container/Container.js","redux/operations.js","components/ContactForm/ContactForm.js","redux/selectors.js","components/ContactList/ContactList.js","redux/actions.js","components/Filter/Filter.js","App.js","redux/reducer.js","redux/store.js","index.js"],"names":["module","exports","Container","children","className","s","container","contactApi","createApi","reducerPath","tagTypes","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","fetchContacts","query","providesTags","deleteContact","mutation","contactId","url","method","invalidatesTags","addContact","newContact","body","useFetchContactsQuery","useDeleteContactMutation","useAddContactMutation","ContactForm","items","useState","name","useName","phone","usePhone","addContacts","handleChange","event","target","value","reset","form","onSubmit","nameInclude","reduce","acc","contact","phonesInclude","includes","alert","contactCheck","preventDefault","type","onChange","pattern","title","required","button","size","getFilter","state","contacts","filter","ContactsList","setContacts","useSelector","useEffect","normalizedFilter","toLowerCase","list","map","id","item","text","onClick","changeFilter","createAction","Filter","dispatch","useDispatch","contactsActions","App","data","createReducer","actions","_","payload","combineReducers","store","configureStore","reducer","contactsReducer","devTools","process","middleware","getDefaultMiddleware","setupListeners","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"sGACAA,EAAOC,QAAU,CAAC,KAAO,0BAA0B,KAAO,0BAA0B,KAAO,0BAA0B,OAAS,8B,mBCA9HD,EAAOC,QAAU,CAAC,KAAO,0BAA0B,OAAS,8B,mBCA5DD,EAAOC,QAAU,CAAC,UAAY,+B,mBCA9BD,EAAOC,QAAU,CAAC,KAAO,uB,yHCEV,SAASC,EAAT,GAAgC,IAAXC,EAAU,EAAVA,SAChC,OAAO,qBAAKC,UAAWC,IAAEC,UAAlB,SAA8BH,I,2CCF5BI,EAAaC,YAAU,CAClCC,YAAa,cACbC,SAAU,CAAC,YACXC,UAAWC,YAAe,CACxBC,QAAS,+DAEXC,UAAW,SAAAC,GAAO,MAAK,CACrBC,cAAeD,EAAQE,MAAM,CAC3BA,MAAO,8BACPC,aAAc,CAAC,cAEjBC,cAAeJ,EAAQK,SAAS,CAC9BH,MAAO,SAAAI,GAAS,MAAK,CACnBC,IAAI,YAAD,OAAcD,GACjBE,OAAQ,WAEVC,gBAAiB,CAAC,cAEpBC,WAAYV,EAAQK,SAAS,CAC3BH,MAAO,SAAAS,GAAU,MAAK,CACpBJ,IAAK,YACLC,OAAQ,OACRI,KAAK,eAAMD,KAEbF,gBAAiB,CAAC,kBAKtBI,EAGErB,EAHFqB,sBACAC,EAEEtB,EAFFsB,yBACAC,EACEvB,EADFuB,sB,yBC3Ba,SAASC,EAAT,GAAiC,IAAVC,EAAS,EAATA,MACpC,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAsBP,IAAfQ,EAAP,oBAgBA,SAASC,EAAaC,GACpB,MAAwBA,EAAMC,OAAtBP,EAAR,EAAQA,KAAMQ,EAAd,EAAcA,MAEd,OAAQR,GACN,IAAK,OACHC,EAAQO,GACR,MACF,IAAK,QACHL,EAASK,GACT,MACF,QACE,QAGN,IASMC,EAAQ,WACZR,EAAQ,IACRE,EAAS,KAGX,OACE,uBAAMjC,UAAWC,IAAEuC,KAAMC,SAfN,SAAAL,IA5BA,WACnB,IAAMM,EAAcd,EAAMe,QACxB,SAACC,EAAKC,GAAN,4BAAsBD,GAAtB,CAA2BC,EAAQf,SACnC,IAEIgB,EAAgBlB,EAAMe,QAC1B,SAACC,EAAKC,GAAN,4BAAsBD,GAAtB,CAA2BC,EAAQb,UACnC,KAEEU,EAAYK,SAASjB,IAASgB,EAAcC,SAASf,KACvDgB,MAAM,GAAD,OAAIlB,GAAJ,OAAWE,EAAX,6BAmBHiB,KAGJb,EAAMc,iBACNX,IAEAL,EADmB,CAAEJ,OAAME,YAS3B,UACE,kCACE,wCACA,uBACEmB,KAAK,OACLrB,KAAK,OACLQ,MAAOR,EACPsB,SAAUjB,EACVkB,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAGZ,kCACE,yCACA,uBACEJ,KAAK,MACLrB,KAAK,QACLQ,MAAON,EACPoB,SAAUjB,EACVkB,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,OAGZ,wBAAQvD,UAAWC,IAAEuD,OAAQL,KAAK,SAAlC,SACE,cAAC,IAAD,CAAgBM,KAAM,U,WChFjBC,EAAY,SAAAC,GAAK,OAAIA,EAAMC,SAASC,Q,yBCQlC,SAASC,EAAT,GAAkC,IAAVlC,EAAS,EAATA,MACrC,EAAwBH,IAAjBV,EAAP,oBACA,EAAgCc,mBAAS,IAAzC,mBAAO+B,EAAP,KAAiBG,EAAjB,KACMzB,EAAQ0B,YAAYN,GAU1B,OARAO,qBAAU,WACR,IAAMC,EAAmB5B,EAAM6B,cAE/BJ,EACEnC,EAAMiC,QAAO,qBAAG/B,KAAgBqC,cAAcpB,SAASmB,SAExD,CAACtC,EAAOU,IAGT,oBAAItC,UAAWC,IAAEmE,KAAjB,SACGR,EAASS,KAAI,gBAAGvC,EAAH,EAAGA,KAAMwC,EAAT,EAASA,GAAItC,EAAb,EAAaA,MAAb,OACZ,qBAAahC,UAAWC,IAAEsE,KAA1B,UACE,oBAAGvE,UAAWC,IAAEuE,KAAhB,UAAuB1C,EAAvB,OACA,+BAAOE,IACP,wBAAQhC,UAAWC,IAAEuD,OAAQiB,QAAS,kBAAM1D,EAAcuD,IAA1D,SACE,cAAC,IAAD,CAA4BtE,UAAWC,IAAEuD,aAJpCc,Q,WCnBF,GAAEI,aAFIC,uBAAa,0B,iBCGnB,SAASC,IACtB,IAAMtC,EAAQ0B,YAAYN,GACpBmB,EAAWC,cACjB,OACE,kCACE,mBAAG9E,UAAWC,IAAEuE,KAAhB,mCACA,uBACErB,KAAK,OACLb,MAAOA,EACPc,SAAU,SAAAhB,GAAK,OACbyC,EAASE,EAAgBL,aAAatC,EAAMC,OAAOC,cCT9C,SAAS0C,IACtB,IAAcpD,EAAUJ,IAAhByD,KAER,OACE,eAACnF,EAAD,WACE,2CACA,cAAC6B,EAAD,CAAaC,MAAOA,IACpB,0CACA,cAACgD,EAAD,IACChD,GAAS,cAAC,EAAD,CAAaA,MAAOA,O,oBCZ9BiC,EAASqB,wBAAc,GAAD,eACzBC,EAAQT,cAAe,SAACU,EAAD,YAAMC,YAGjBC,4BAAgB,CAC7BzB,W,QCHW0B,EAAQC,yBAAe,CAClCC,SAAO,mBACJtF,EAAWE,YAAcF,EAAWsF,SADhC,yBAEKC,GAFL,GAIPC,UAAUC,EACVC,WAAW,GAAD,mBAAMC,kCAAN,CAA8B3F,EAAW0F,eAGrDE,yBAAeR,EAAMV,U,MCRrBmB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUX,MAAOA,EAAjB,SACE,cAACP,EAAD,QAGJmB,SAASC,cAAc,Y","file":"static/js/main.0a47672f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2bZZ0\",\"item\":\"ContactList_item__1jZvW\",\"text\":\"ContactList_text__eUqbY\",\"button\":\"ContactList_button__cZAsC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3Vf7L\",\"button\":\"ContactForm_button__1xLW8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__3Lsqw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Filter_text__2_fUZ\"};","import PropTypes from 'prop-types';\r\nimport s from './Container.module.css'\r\n\r\nexport default function Container ({children}){\r\n    return <div className={s.container}>{children}</div>\r\n}\r\n\r\nContainer.propTypes = {\r\n    children: PropTypes.array.isRequired,\r\n  };","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\n\r\nexport const contactApi = createApi({\r\n  reducerPath: 'contactsApi',\r\n  tagTypes: ['Contacts'],\r\n  baseQuery: fetchBaseQuery({\r\n    baseUrl: 'https://61a3c411d5e8330017292178.mockapi.io/api/yatsa-dev/',\r\n  }),\r\n  endpoints: builder => ({\r\n    fetchContacts: builder.query({\r\n      query: () => `contacts/`,\r\n      providesTags: ['Contacts'],\r\n    }),\r\n    deleteContact: builder.mutation({\r\n      query: contactId => ({\r\n        url: `contacts/${contactId}`,\r\n        method: 'DELETE',\r\n      }),\r\n      invalidatesTags: ['Contacts'],\r\n    }),\r\n    addContact: builder.mutation({\r\n      query: newContact => ({\r\n        url: 'contacts/',\r\n        method: 'POST',\r\n        body: { ...newContact },\r\n      }),\r\n      invalidatesTags: ['Contacts'],\r\n    }),\r\n  }),\r\n});\r\nexport const {\r\n  useFetchContactsQuery,\r\n  useDeleteContactMutation,\r\n  useAddContactMutation,\r\n} = contactApi;\r\n","/* eslint-disable react-hooks/rules-of-hooks */\r\nimport { useState } from 'react';\r\nimport { useAddContactMutation } from '../../redux/operations';\r\nimport { IoIosPersonAdd } from 'react-icons/io';\r\nimport s from './ContactForm.module.css';\r\n\r\nexport default function ContactForm({ items }) {\r\n  const [name, useName] = useState('');\r\n  const [phone, usePhone] = useState('');\r\n  const [addContacts] = useAddContactMutation();\r\n\r\n  const contactCheck = () => {\r\n    const nameInclude = items.reduce(\r\n      (acc, contact) => [...acc, contact.name],\r\n      [],\r\n    );\r\n    const phonesInclude = items.reduce(\r\n      (acc, contact) => [...acc, contact.phone],\r\n      [],\r\n    );\r\n    if (nameInclude.includes(name) || phonesInclude.includes(phone)) {\r\n      alert(`${name}${phone} is already in contacts`);\r\n    }\r\n  };\r\n\r\n  function handleChange(event) {\r\n    const { name, value } = event.target;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        useName(value);\r\n        break;\r\n      case 'phone':\r\n        usePhone(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  }\r\n  const handleSubmit = event => {\r\n    if (contactCheck()) {\r\n      return;\r\n    }\r\n    event.preventDefault();\r\n    reset();\r\n    const newContact = { name, phone };\r\n    addContacts(newContact);\r\n  };\r\n  const reset = () => {\r\n    useName('');\r\n    usePhone('');\r\n  };\r\n\r\n  return (\r\n    <form className={s.form} onSubmit={handleSubmit}>\r\n      <label>\r\n        <span>Name</span>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          onChange={handleChange}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n        />\r\n      </label>\r\n      <label>\r\n        <span>Phone</span>\r\n        <input\r\n          type=\"tel\"\r\n          name=\"phone\"\r\n          value={phone}\r\n          onChange={handleChange}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n        />\r\n      </label>\r\n      <button className={s.button} type=\"submit\">\r\n        <IoIosPersonAdd size={50} />\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n","export const getFilter = state => state.contacts.filter;\r\n","import { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useDeleteContactMutation } from '../../redux/operations';\r\nimport { getFilter } from 'redux/selectors';\r\nimport { BsFillFileEarmarkExcelFill } from 'react-icons/bs';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactList.module.css';\r\n\r\nexport default function ContactsList({ items }) {\r\n  const [deleteContact] = useDeleteContactMutation();\r\n  const [contacts, setContacts] = useState([]);\r\n  const value = useSelector(getFilter);\r\n\r\n  useEffect(() => {\r\n    const normalizedFilter = value.toLowerCase();\r\n\r\n    setContacts(\r\n      items.filter(({ name }) => name.toLowerCase().includes(normalizedFilter)),\r\n    );\r\n  }, [items, value]);\r\n\r\n  return (\r\n    <ul className={s.list}>\r\n      {contacts.map(({ name, id, phone }) => (\r\n        <li key={id} className={s.item}>\r\n          <p className={s.text}>{name}:</p>\r\n          <span>{phone}</span>\r\n          <button className={s.button} onClick={() => deleteContact(id)}>\r\n            <BsFillFileEarmarkExcelFill className={s.button} />\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)),\r\n  onDeleteContact: PropTypes.func,\r\n};\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nconst changeFilter = createAction('contacts/changeFilter');\r\n\r\nexport default { changeFilter };\r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport contactsActions from '../../redux/actions';\r\nimport { getFilter } from '../../redux/selectors';\r\nimport s from './Filter.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Filter() {\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <label>\r\n      <p className={s.text}>Find contacts by name</p>\r\n      <input\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={event =>\r\n          dispatch(contactsActions.changeFilter(event.target.value))\r\n        }\r\n      />\r\n    </label>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.func,\r\n  onChange: PropTypes.func,\r\n};\r\n","/* eslint-disable react-hooks/rules-of-hooks */\r\nimport Container from 'components/Container';\r\nimport ContactForm from 'components/ContactForm';\r\nimport ContactList from 'components/ContactList';\r\nimport Filter from 'components/Filter';\r\nimport { useFetchContactsQuery } from './redux/operations';\r\n\r\nexport default function App() {\r\n  const { data: items } = useFetchContactsQuery();\r\n\r\n  return (\r\n    <Container>\r\n      <h1>Phonebook</h1>\r\n      <ContactForm items={items} />\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      {items && <ContactList items={items} />}\r\n    </Container>\r\n  );\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './actions';\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  filter,\r\n});\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport contactsReducer from './reducer';\r\nimport { contactApi } from './operations';\r\nimport { setupListeners } from '@reduxjs/toolkit/dist/query';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    [contactApi.reducerPath]: contactApi.reducer,\r\n    contacts: contactsReducer,\r\n  },\r\n  devTools: process.env.NODE_ENV === 'development',\r\n  middleware: [...getDefaultMiddleware(), contactApi.middleware],\r\n});\r\n\r\nsetupListeners(store.dispatch);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from 'redux/store';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.querySelector('#root'),\r\n);\r\n"],"sourceRoot":""}